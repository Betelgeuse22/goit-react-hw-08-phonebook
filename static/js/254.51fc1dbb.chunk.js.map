{"version":3,"file":"static/js/254.51fc1dbb.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/Contacts/Contact.styled.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const selectContacts = state => state.contacts;\n\nexport const selectFilter = state => state.filter.value;\n","import styled from 'styled-components';\n\nexport const FormStyle = styled.form``;\n\nexport const Input = styled.input`\n  margin: 20px 0;\n  padding: 20px;\n\n  width: 100%;\n  height: 40px;\n  border-radius: 20px;\n  border-style: 2px solid green;\n\n  background-color: rgba(206, 186, 186, 0.4);\n`;\n\nexport const Label = styled.label`\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n`;\n\nexport const Button = styled.button`\n  padding: 5px 10px;\n  height: 30px;\n  width: 150px;\n  font-size: 16px;\n  color: black;\n\n  background-color: rgba(191, 204, 191, 0.6);\n  border-radius: 20px;\n  border-style: 2px solid green;\n\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport toast from 'react-hot-toast';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { FormStyle, Label } from './Form.styled';\nimport { TextField, Button } from '@mui/material';\n\nexport function Form() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChangeName = e => {\n    const { value } = e.target;\n    setName(value);\n  };\n\n  const handleChangeNumber = e => {\n    const { value } = e.target;\n    setNumber(value);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const id = nanoid();\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n    const contactsLists = [...contacts.items];\n\n    if (\n      contactsLists.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      toast.error(`${name} is already in contacts.`);\n      return;\n    } else if (contactsLists.find(contact => number === contact.number)) {\n      toast.error(`${`${name} : ${number}`} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ id, name: name, number: number }));\n    reset();\n  };\n\n  return (\n    <>\n      <FormStyle onSubmit={handleSubmit}>\n        <Label htmlFor={nameId}>\n          <TextField\n            label=\"Name\"\n            variant=\"standard\"\n            type=\"text\"\n            id={nameId}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChangeName}\n          />\n        </Label>\n        <Label htmlFor={numberId}>\n          <TextField\n            label=\"Number\"\n            variant=\"standard\"\n            type=\"tel\"\n            id={numberId}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChangeNumber}\n          />\n        </Label>\n        <Button type=\"submit\" variant=\"contained\">\n          Add Contact\n        </Button>\n      </FormStyle>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const ContactName = styled.p`\n  color: gray;\n  margin-right: 24px;\n`;\n\nexport const Contactlist = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  margin-bottom: 12px;\n  justify-content: space-between;\n`;\n\nexport const AppSection = styled.div`\n  padding: 16px;\n  margin: 50px auto;\n  width: 500px;\n  background-color: #c3f4bb;\n  outline: 2px solid green;\n  border-radius: 25px;\n`;\n\nexport const TitelPhone = styled.h1`\n  font-style: italic;\n  font-size: 50px;\n  text-align: center;\n  color: gray;\n`;\n\nexport const TitelContact = styled.h2`\n  font-style: italic;\n  font-size: 30px;\n  text-align: center;\n  color: gray;\n`;","import {\n  ContactName,\n  Contactlist,\n  ContactItem,\n  TitelContact,\n} from './Contact.styled';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button } from '@mui/material';\n\nexport const Contacts = () => {\n  const { items, isLoading, error } = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n  const onRemoveContact = contactId => dispatch(deleteContact(contactId));\n\n  const getVisibleContacts = () => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <>\n      {getVisibleContacts().length > 0 && !isLoading ? (\n        <Contactlist>\n          {error && <b>{error}</b>}\n          {getVisibleContacts().map((contact, id) => (\n            <ContactItem key={id}>\n              <ContactName>{contact.name + ' : ' + contact.number}</ContactName>\n              {\n                <Button\n                  type=\"button\"\n                  variant=\"contained\"\n                  onClick={() => onRemoveContact(contact.id)}\n                >\n                  Delete\n                </Button>\n              }\n            </ContactItem>\n          ))}\n        </Contactlist>\n      ) : (\n        <TitelContact>It's empty here</TitelContact>\n      )}\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onChangeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <TextField\n        fullWidth\n        margin=\"normal\"\n        label=\"Find contacts by name\"\n        variant=\"standard\"\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n      />\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Toaster } from 'react-hot-toast';\nimport { Form } from '../components/Form/Form';\nimport { Contacts } from '../components/Contacts/Contacts';\nimport { Filter } from '../components/Filter/Filter';\nimport {\n  AppSection,\n  TitelPhone,\n  TitelContact,\n} from '../components/Contacts/Contact.styled';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <AppSection>\n      <Toaster />\n      <TitelPhone>Phonebook</TitelPhone>\n      <Form />\n      <TitelContact>Contacts</TitelContact>\n      <Filter />\n      <Contacts />\n    </AppSection>\n  );\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","selectFilter","filter","value","FormStyle","styled","Label","Form","useSelector","dispatch","useDispatch","nameId","numberId","useState","name","setName","number","setNumber","onSubmit","e","preventDefault","target","contactsLists","items","find","contact","toLowerCase","toast","addContact","htmlFor","TextField","label","variant","type","pattern","title","required","onChange","ContactName","Contactlist","ContactItem","AppSection","TitelPhone","TitelContact","Contacts","isLoading","error","getVisibleContacts","includes","length","map","onClick","contactId","deleteContact","Filter","fullWidth","margin","setFilter","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}